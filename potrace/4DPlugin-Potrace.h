/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : Potrace
 #	author : miyako
 #	2016/09/23
 #
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_POTRACE_H
#define PLUGIN_POTRACE_H

#include "4DPluginAPI.h"

#ifdef _WINDOWS
#define snprintf _snprintf
#define vsnprintf _vsnprintf
#define strcasecmp _stricmp
#define strncasecmp _strnicmp
#endif
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#ifndef UNDEF
#define UNDEF ((double)(1e30))   /* a value to represent "undefined" */
#endif

// --- Potrace
void Potrace(PA_PluginParameters params);

#pragma mark main.h

#include "potracelib.h"
#include "progress_bar.h"
#include "auxiliary.h"
#include "trans.h"

/* structure to hold a dimensioned value */
struct dim_s {
    double x; /* value */
    double d; /* dimension (in pt), or 0 if not given */
};
typedef struct dim_s dim_t;

struct backend_s;

/* structure to hold command line options */
struct info_s {
    struct backend_s *backend;  /* type of backend (eps,ps,pgm etc) */
    potrace_param_t *param;  /* tracing parameters, see potracelib.h */
    int debug;         /* type of output (0-2) (for BACKEND_PS/EPS only) */
    dim_t width_d;     /* desired width of image */
    dim_t height_d;    /* desired height of image */
    double rx;         /* desired x resolution (in dpi) */
    double ry;         /* desired y resolution (in dpi) */
    double sx;         /* desired x scaling factor */
    double sy;         /* desired y scaling factor */
    double stretch;    /* ry/rx, if not otherwise determined */
    dim_t lmar_d, rmar_d, tmar_d, bmar_d;   /* margins */
    double angle;      /* rotate by this many degrees */
    int paperwidth, paperheight;  /* paper size for ps backend (in pt) */
    int tight;         /* should bounding box follow actual vector outline? */
    double unit;       /* granularity of output grid */
    int compress;      /* apply compression? */
    int pslevel;       /* postscript level to use: affects only compression */
    int color;         /* rgb color code 0xrrggbb: line color */
    int fillcolor;     /* rgb color code 0xrrggbb: fill color */
    double gamma;      /* gamma value for pgm backend */
    int longcoding;    /* do not optimize for file size? */
    char *outfile;     /* output filename, if given */
    char **infiles;    /* array of input filenames */
    int infilecount;   /* number of input filenames */
    int some_infiles;  /* do we process a list of input filenames? */
    double blacklevel; /* 0 to 1: black/white cutoff in input file */
    int invert;        /* invert bitmap? */
    int opaque;        /* paint white shapes opaquely? */
    int grouping;      /* 0=flat; 1=connected components; 2=hierarchical */
    int progress;      /* should we display a progress bar? */
    progress_bar_t *progress_bar;  /* which progress bar to use */
};
typedef struct info_s info_t;

extern info_t info;

/* structure to hold per-image information, set e.g. by calc_dimensions */
struct imginfo_s {
    int pixwidth;        /* width of input pixmap */
    int pixheight;       /* height of input pixmap */
    double width;        /* desired width of image (in pt or pixels) */
    double height;       /* desired height of image (in pt or pixels) */
    double lmar, rmar, tmar, bmar;   /* requested margins (in pt) */
    trans_t trans;        /* specify relative position of a tilted rectangle */
};
typedef struct imginfo_s imginfo_t;

#define DIM_IN (72)
#define DIM_CM (72 / 2.54)
#define DIM_MM (72 / 25.4)
#define DIM_PT (1)

#pragma mark bitmap_io.h

struct bmp_info_s {
	unsigned int FileSize;
	unsigned int reserved;
	unsigned int DataOffset;
	unsigned int InfoSize;
	unsigned int w;              /* width */
	unsigned int h;              /* height */
	unsigned int Planes;
	unsigned int bits;           /* bits per sample */
	unsigned int comp;           /* compression mode */
	unsigned int ImageSize;
	unsigned int XpixelsPerM;
	unsigned int YpixelsPerM;
	unsigned int ncolors;        /* number of colors in palette */
	unsigned int ColorsImportant;
	unsigned int RedMask;
	unsigned int GreenMask;
	unsigned int BlueMask;
	unsigned int AlphaMask;
	unsigned int ctbits;         /* sample size for color table */
	int topdown;                 /* top-down mode? */
};
typedef struct bmp_info_s bmp_info_t;

#endif /* PLUGIN_POTRACE_H */

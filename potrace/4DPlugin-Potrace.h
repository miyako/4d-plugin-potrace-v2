/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : Potrace
 #	author : miyako
 #	2016/09/23
 #
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_POTRACE_H
#define PLUGIN_POTRACE_H

#include "4DPluginAPI.h"

#include <math.h>
#include <stdio.h>
#include <stdarg.h>

#include <string>

#ifdef _WINDOWS
#define snprintf _snprintf
#define vsnprintf _vsnprintf
#define strcasecmp _stricmp
#define strncasecmp _strnicmp
#endif
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
#ifndef UNDEF
#define UNDEF ((double)(1e30))   /* a value to represent "undefined" */
#endif

#pragma mark -

// --- Potrace
void Potrace(PA_PluginParameters params);
void Mkbitmap(PA_PluginParameters params);

#pragma mark - main.h

#include "potracelib.h"
#include "progress_bar.h"
#include "auxiliary.h"
#include "trans.h"
#include "curve.h"
#include "lists.h"

#include "4DPlugin-bmp.h"
#include "4DPlugin-trans.h"

/* structure to hold a dimensioned value */
struct dim_s {
    double x; /* value */
    double d; /* dimension (in pt), or 0 if not given */
};
typedef struct dim_s dim_t;

/* structure to hold command line options */
struct info_s {
    struct backend_s *backend;  /* type of backend (eps,ps,pgm etc) */
    potrace_param_t *param;  /* tracing parameters, see potracelib.h */
    int debug;         /* type of output (0-2) (for BACKEND_PS/EPS only) */
    dim_t width_d;     /* desired width of image */
    dim_t height_d;    /* desired height of image */
    double rx;         /* desired x resolution (in dpi) */
    double ry;         /* desired y resolution (in dpi) */
    double sx;         /* desired x scaling factor */
    double sy;         /* desired y scaling factor */
    double stretch;    /* ry/rx, if not otherwise determined */
    dim_t lmar_d, rmar_d, tmar_d, bmar_d;   /* margins */
    double angle;      /* rotate by this many degrees */
    int paperwidth, paperheight;  /* paper size for ps backend (in pt) */
    int tight;         /* should bounding box follow actual vector outline? */
    double unit;       /* granularity of output grid */
    int compress;      /* apply compression? */
    int pslevel;       /* postscript level to use: affects only compression */
    int color;         /* rgb color code 0xrrggbb: line color */
    int fillcolor;     /* rgb color code 0xrrggbb: fill color */
    double gamma;      /* gamma value for pgm backend */
    int longcoding;    /* do not optimize for file size? */
    char *outfile;     /* output filename, if given */
    char **infiles;    /* array of input filenames */
    int infilecount;   /* number of input filenames */
    int some_infiles;  /* do we process a list of input filenames? */
    double blacklevel; /* 0 to 1: black/white cutoff in input file */
    int invert;        /* invert bitmap? */
    int opaque;        /* paint white shapes opaquely? */
    int grouping;      /* 0=flat; 1=connected components; 2=hierarchical */
    int progress;      /* should we display a progress bar? */
    progress_bar_t *progress_bar;  /* which progress bar to use */
};
typedef struct info_s info_t;

extern info_t info;

/* structure to hold per-image information, set e.g. by calc_dimensions */
struct imginfo_s {
    int pixwidth;        /* width of input pixmap */
    int pixheight;       /* height of input pixmap */
    double width;        /* desired width of image (in pt or pixels) */
    double height;       /* desired height of image (in pt or pixels) */
    double lmar, rmar, tmar, bmar;   /* requested margins (in pt) */
    trans_t trans;        /* specify relative position of a tilted rectangle */
};
typedef struct imginfo_s imginfo_t;

#define DIM_IN (72)
#define DIM_CM (72 / 2.54)
#define DIM_MM (72 / 25.4)
#define DIM_PT (1)

#define DEFAULT_DIM DIM_CM
#define DEFAULT_DIM_NAME "centimeters"

#define DEFAULT_PAPERWIDTH 595
#define DEFAULT_PAPERHEIGHT 842
#define DEFAULT_PAPERFORMAT "a4"

#pragma mark - bitmap_io.h

struct bmp_info_s {
	unsigned int FileSize;
	unsigned int reserved;
	unsigned int DataOffset;
	unsigned int InfoSize;
	unsigned int w;              /* width */
	unsigned int h;              /* height */
	unsigned int Planes;
	unsigned int bits;           /* bits per sample */
	unsigned int comp;           /* compression mode */
	unsigned int ImageSize;
	unsigned int XpixelsPerM;
	unsigned int YpixelsPerM;
	unsigned int ncolors;        /* number of colors in palette */
	unsigned int ColorsImportant;
	unsigned int RedMask;
	unsigned int GreenMask;
	unsigned int BlueMask;
	unsigned int AlphaMask;
	unsigned int ctbits;         /* sample size for color table */
	int topdown;                 /* top-down mode? */
};
typedef struct bmp_info_s bmp_info_t;

#include <vector>

#define ycorr(y) (bmpinfo.topdown ? bmpinfo.h-1-y : y)
#define TRY(x) if (x) goto try_error
#define TRY_EOF(x) if (x) goto eof
#define INTBITS (8*sizeof(int))
#define COLTABLE(c) ((c) < bmpinfo.ncolors ? coltable[(c)] : 0)

#include "auxiliary.h"
#include "bitmap.h"
#include "bitops.h"
#include "lists.h"

#define BITMAPCOREHEADER 12
#define OS22XBITMAPHEADER 64
#define BITMAPINFOHEADER 40
#define BITMAPV2INFOHEADER 52
#define BITMAPV3INFOHEADER 56
#define BITMAPV4HEADER 108
#define BITMAPV5HEADER 124

void bmp_pad_reset(void);
int bmp_forward(std::vector<unsigned char> buf, int *pos, int *count, int newPos);
int bmp_pad(std::vector<unsigned char> &buf, int *pos, int *count);
int bmp_readint(std::vector<unsigned char> &buf, int *pos, int *count, int len, unsigned int *p);
int bm_readbody_bmp(std::vector<unsigned char> &buf, double threshold, potrace_bitmap_t **bmp);

#pragma mark - main.h

/* backends and their characteristics */
struct backend_s {
    const char *name;       /* name of this backend */
    const char *ext;        /* file extension */
    int fixed;              /* fixed page size backend? */
    int pixel;              /* pixel-based backend? */
    int multi;              /* multi-page backend? */
    int (*init_f)(std::vector<unsigned char> &fout, info_t *info);
                            /* initialization function */
    PA_Picture (*page_f)(std::vector<unsigned char> &fout, potrace_path_t *plist, imginfo_t *imginfo, info_t *info);
                            /* per-bitmap function */
    int (*term_f)(std::vector<unsigned char> &fout, info_t *info);
                            /* finalization function */
    int opticurve;          /* opticurve capable (true Bezier curves?) */
};
typedef struct backend_s backend_t;

#include "4DPlugin-bbox.h"

#include "backend_svg.h"
#include "backend_pdf.h"

#include "4DPlugin-JSON.h"

typedef enum image_formats
{
    image_format_svg  = 0,
    image_format_pdf  = 1
}image_format_t;

image_format_t get_image_format(PA_ObjectRef options);

typedef enum turn_policy
{
    turn_policy_black       = 0,
    turn_policy_white       = 1,
    turn_policy_right       = 2,
    turn_policy_left        = 3,
    turn_policy_minority    = 4,
    turn_policy_majority    = 5,
    turn_policy_random      = 6
}turn_policy_t;

turn_policy_t get_turn_policy(PA_ObjectRef options);

typedef unsigned int turdsize_t;

typedef enum svg_grouping
{
    svg_grouping_flat           = 0,
    svg_grouping_connected      = 1,
    svg_grouping_hierarchical   = 2
}svg_grouping_t;

svg_grouping_t get_svg_grouping(PA_ObjectRef options);

typedef enum page_size
{
    page_size_A4       = 0,
    page_size_A3       = 1,
    page_size_A5       = 2,
    page_size_B5        = 3,
    page_size_Letter    = 4,
    page_size_Legal    = 5,
    page_size_Tabloid      = 6,
    page_size_Statement      = 7,
    page_size_Executive      = 8,
    page_size_Folio      = 9,
    page_size_Quarto      = 10,
    page_size_10x14      = 11
}page_size_t;

page_size_t get_page_size(PA_ObjectRef options);

#endif /* PLUGIN_POTRACE_H */

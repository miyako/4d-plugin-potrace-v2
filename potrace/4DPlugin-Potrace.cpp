/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Potrace
 #	author : miyako
 #	2016/09/23
 #
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Potrace.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
            // --- Potrace
            
            case 1 :
            Potrace(params);
            break;
            
            case 2 :
            Mkbitmap(params);
            break;
        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void Potrace(PA_PluginParameters params) {
   
    PA_ObjectRef returnValue = PA_CreateObject();
    
    PA_Handle h = PA_GetBlobHandleParameter( params, 1 );
    PA_ObjectRef options = PA_GetObjectParameter( params, 2 );
    
    if(h)
    {
        std::vector<unsigned char> buf(PA_GetHandleSize(h));
        memcpy(&buf[0], (const void *)PA_LockHandle(h), PA_GetHandleSize(h));
        
        potrace_bitmap_t *bmp = NULL;
        
        if(bm_readbody_bmp(buf, 0, &bmp) >= 0)
        {
            potrace_param_t *param = potrace_param_default();
            potrace_state_t *st = potrace_trace(param, bmp);
            
            if(st)
            {
                if(st->status == POTRACE_STATUS_OK)
                {
                    info_t info;
                    memset(&info, 0x00, sizeof(info_t));
                    
                    info.debug = 0;
                    info.width_d.x = UNDEF;
                    info.height_d.x = UNDEF;
                    info.rx = UNDEF;
                    info.ry = UNDEF;
                    info.sx = UNDEF;
                    info.sy = UNDEF;
                    info.stretch = 1;
                    info.lmar_d.x = UNDEF;
                    info.rmar_d.x = UNDEF;
                    info.tmar_d.x = UNDEF;
                    info.bmar_d.x = UNDEF;
                    info.angle = 0;
                    info.paperwidth = DEFAULT_PAPERWIDTH;
                    info.paperheight = DEFAULT_PAPERHEIGHT;
                    info.tight = 0;
                    info.unit = 10;
                    info.compress = 0;
                    info.pslevel = 2;
                    info.color = 0x000000;
                    info.gamma = 2.2;
                    info.longcoding = 0;
                    info.outfile = NULL;
                    info.blacklevel = 0.5;
                    info.invert = 0;
                    info.opaque = 0;
                    info.grouping = 1;
                    info.fillcolor = 0xFFFFFF;
                    info.progress = 0;
                    info.progress_bar = NULL;
                    info.param = param;
                    
                    backend_t backend;
                    memset(&backend, 0x00, sizeof(backend_t));
                    
                    //backend:svg
                    backend.name = (char *)"svg";
                    backend.ext = (char *)".svg";
                    backend.page_f = page_svg;
                    backend.opticurve = 1;
                    
                    info.backend = &backend;
                    
                    imginfo_t imginfo;
                    imginfo.pixwidth = bmp->w;
                    imginfo.pixheight = bmp->h;
                    calc_dimensions(&imginfo, st->plist, &info);
                    
                    PA_Picture picture = info.backend->page_f(st->plist, &imginfo, &info);
                    
                    if(picture)
                    {
                            ob_set_p(returnValue, L"image", picture);
                    }
                    
                }
                potrace_state_free(st);
            }
            
            potrace_param_free(param);
            bm_free(bmp);
        }
        
        PA_UnlockHandle(h);
    }
    
    PA_ReturnObject(params, returnValue);
}

void Mkbitmap(PA_PluginParameters params) {
    
    /*
     PA_ObjectRef returnValue = PA_CreateObject();
     
     PA_Handle h = PA_GetBlobHandleParameter( params, 1 );
     PA_ObjectRef options = PA_GetObjectParameter( params, 2 );
     
     if(h)
     {
     PA_long32 size = PA_GetHandleSize(h);
     
     PA_UnlockHandle(h);
     }
     */

}
